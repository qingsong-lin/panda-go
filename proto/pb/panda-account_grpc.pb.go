// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: panda-account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PandaAccountClient is the client API for PandaAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PandaAccountClient interface {
	SayHello2DemoClient(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (PandaAccount_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (PandaAccount_DownloadFileClient, error)
}

type pandaAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewPandaAccountClient(cc grpc.ClientConnInterface) PandaAccountClient {
	return &pandaAccountClient{cc}
}

func (c *pandaAccountClient) SayHello2DemoClient(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/pb.PandaAccount/SayHello2DemoClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pandaAccountClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (PandaAccount_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &PandaAccount_ServiceDesc.Streams[0], "/pb.PandaAccount/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pandaAccountUploadFileClient{stream}
	return x, nil
}

type PandaAccount_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type pandaAccountUploadFileClient struct {
	grpc.ClientStream
}

func (x *pandaAccountUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pandaAccountUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pandaAccountClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (PandaAccount_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &PandaAccount_ServiceDesc.Streams[1], "/pb.PandaAccount/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pandaAccountDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PandaAccount_DownloadFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type pandaAccountDownloadFileClient struct {
	grpc.ClientStream
}

func (x *pandaAccountDownloadFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PandaAccountServer is the server API for PandaAccount service.
// All implementations should embed UnimplementedPandaAccountServer
// for forward compatibility
type PandaAccountServer interface {
	SayHello2DemoClient(context.Context, *HelloRequest) (*HelloResponse, error)
	UploadFile(PandaAccount_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, PandaAccount_DownloadFileServer) error
}

// UnimplementedPandaAccountServer should be embedded to have forward compatible implementations.
type UnimplementedPandaAccountServer struct {
}

func (UnimplementedPandaAccountServer) SayHello2DemoClient(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2DemoClient not implemented")
}
func (UnimplementedPandaAccountServer) UploadFile(PandaAccount_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPandaAccountServer) DownloadFile(*DownloadFileRequest, PandaAccount_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

// UnsafePandaAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PandaAccountServer will
// result in compilation errors.
type UnsafePandaAccountServer interface {
	mustEmbedUnimplementedPandaAccountServer()
}

func RegisterPandaAccountServer(s grpc.ServiceRegistrar, srv PandaAccountServer) {
	s.RegisterService(&PandaAccount_ServiceDesc, srv)
}

func _PandaAccount_SayHello2DemoClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PandaAccountServer).SayHello2DemoClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PandaAccount/SayHello2DemoClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PandaAccountServer).SayHello2DemoClient(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PandaAccount_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PandaAccountServer).UploadFile(&pandaAccountUploadFileServer{stream})
}

type PandaAccount_UploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type pandaAccountUploadFileServer struct {
	grpc.ServerStream
}

func (x *pandaAccountUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pandaAccountUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PandaAccount_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PandaAccountServer).DownloadFile(m, &pandaAccountDownloadFileServer{stream})
}

type PandaAccount_DownloadFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type pandaAccountDownloadFileServer struct {
	grpc.ServerStream
}

func (x *pandaAccountDownloadFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// PandaAccount_ServiceDesc is the grpc.ServiceDesc for PandaAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PandaAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PandaAccount",
	HandlerType: (*PandaAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello2DemoClient",
			Handler:    _PandaAccount_SayHello2DemoClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _PandaAccount_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _PandaAccount_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "panda-account.proto",
}
